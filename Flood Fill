from queue import Queue
class Solution:
    def floodFill(self, image: List[List[int]], sr: int, sc: int, color: int) -> List[List[int]]:
        if image == None or len(image) == 0 or image[sr][sc] == color:
            return image
        self.m = len(image)
        self.n = len(image[0])
        self.oldColor = image[sr][sc]
        self.dirs = [[-1, 0], [0, -1], [1, 0], [0,1]]
        self.dfs(image, sr, sc, color)
        return image
    
    def dfs(self, image: List[List[int]], row: int, col: int, color:int) -> None:
        #base
        if row < 0 or col < 0 or row == self.m or col == self.n or image[row][col] != self.oldColor:
            return

        #logic
        image[row][col] = color
        for Dir in self.dirs:
            nr = row + Dir[0]
            nc = col + Dir[1]
            self.dfs(image, nr, nc, color)











        #BFS
        # if image == None or len(image) == 0 or image[sr][sc] == color:
        #     return image
        # m = len(image)
        # n = len(image[0])
        # oldColor = image[sr][sc]
        # dirs = [[-1, 0], [0, -1], [1, 0], [0,1]]
        # rows = Queue()
        # cols = Queue()
        # rows.put(sr)
        # cols.put(sc)
        # image[sr][sc] = color
        # while not rows.empty():
        #     cr  = rows.get()
        #     cc = cols.get()
        #     for Dir in dirs:
        #         nr = cr + Dir[0]
        #         nc = cc + Dir[1]
        #         if nr >= 0 and nc >= 0 and nr < m and nc < n and image[nr][nc] == oldColor:
        #             rows.put(nr)
        #             cols.put(nc)
        #             image[nr][nc] = color

        # return image       